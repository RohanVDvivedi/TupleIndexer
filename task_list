** PICKED TASKS

* allocator_table
 * this table will be built to provide a means to build radix_tree and (postgresql like) heap_table on top of this
 * the root_page_id of this datastructure will be a bplus_tree root pointing to a bplus_tree of {free_space, page_id}, from here on which will be called as free_space_tree
 * here the free_space is referred to as the unused_space on the page (i.e. free_space + fragmented_space)
 * allocator_table_page{persistent_page-like-object, original_free_space-> free space of the page as per the free_space_tree}
 * get_new_page_with_write_lock(uint64_t root_page_id)
   * allocate a new allocator_table_page, and initialize it to an empty_page
   * insert the corresponding entry for {free_space, page_id} in free_space_tree
   * return allocator_table_page{persistent_page-like-object, original_free_space} keeping the page locked
 * get_page_with_read/write_lock(uint64_t page_id)
   * get lock on the page, and the free space on it
   * return allocator_table_page{persistent_page-like-object, original_free_space}
 * release_lock_on_page(allocator_table_page) -> return value
   * if the page has same free_space on it as it originally started with (refer to its original_free_space)
     * release lock and return 0
   * else if page became empty
     * remove free_space_tree_entry {original_free_space, page_id}, free the page and return 1
   * else
     * remove free_space_tree_entry {original_free_space, page_id}
     * insert free_space_tree_entry {new_free_space, page_id}
     * release lock and return 0
 * all other pam and pmm functions will just pass the input params as is, they will not modify the original_free_space on the allocator_table_page
 * free_space_iterator (a read-only leaf-only forward iterator over the free_space_tree)
   * get_new_free_space_iterator(uint64_t root_page_id, uint32_t free_space_required => 0, if you want to iterate and grab all the page_ids)
   * uint64_t get_next_page_id_with_free_space() -> returns NULL_PAGE_ID if no page has enough free_space
   * delete_free_space_iterator()
   * this api is provided so that you could attempt to insert to a partial page before allocating a new one, it also allows you to be sure that you don't attempt to already lock a page locked by you, for this insert
   * no page locks on any of the allocator pages to be acquired while you have the free_space_iterator open, this rule is devised to avoid deadlocks
   * i.e. we ensure that we always take page_locks first and then modify anything in the free_space_tree
   * remember if you do not have any page_id returned by this function you still have get_new_page_with_write_lock() function


** OTHER DATABASE DATASTRUCTURE TASKS (VERY IMPORTANT FOR FUTURE OF PROJECT)
 * Rtree will be supported
   * very similar to b+tree, n dimensional data can be searched, inserted, deleted, no least_keys_page_id required
   * splits and merges happen according to the minimal increase in interior node areas
   * inserts walk down only 1 path of the tree, trying to minimize the increased area
   * searches walk down a tree, and maintain a stack, releasing locks only if only 1 entry is to be scaned in the interior node, in READ_LOCK
     * next, prev and get_curr are always supported, in WRITE_LOCK and READ_LOCK_INTERIOR_WRITE_LOCK_LEAF deletes and inserts (if we are in right rectangle), updates are supported
   * you need to define a rtree_tuple_definitions, that also has a function pointer to get the hyper_rectangle for any of the records (which is provided by the user)
   * hyper rectangle is an n dimensional rectangle.
   * all interior nodes store a hyper rectangle and a corresponding page_id, and atleast 2 entries must fit on a page, else rttd contruction fails. yet you can have any number of dimensions.
   * you can also specify any numeral datatype for dimension, as long as it is supported by the TupleStore.
   * need to think about how to calculate areas of the hyper rectangle with dimensions of different types, such that it fits a number and also does not violate precision requirements (getting areas is necessary for splitting and merging).
   * fail insertions if the lower_bound and upper_bound of the get_hyper_rectangle do not follow <= comparison for any of the n dimensions.
   * build utility function to check that hyper rectangle does not have a negative dimension (i.e. lower_bound <= upper_bound), construct hyper_rectangle covering 2 or more hyper rectangles, and check if a hyper_rectangle intersects with another hyper_rectangle etc.
   * accomodate any tuple that is atleast half the size of the leaf page, and interior page tuples would be fixed width with non NULL elements
   * keys will have a even count and all of numeral types, for ith dimension lower bound would be 2*i th key element and 2*i+1 will be upper bound, up to d dimentions (0 <= i < 2*d).
 * build functions to relocate root of the datastructures to lower page ids

FAR FUTURE TASKS AND CONCEPTS
  * implement borrow_from_left and borrow_from_right functions for interior pages and leaf pages to be performed while merges
   * this will be implemented for variable length keys aswell
   * this will take parent page, left page and right page as input and will perform a borrow to make left and right pages balanced if it is possible by the use of borrowing
   * since this function will also modify the parent page, do relese lock on the parent page also if this operation succeeds
   * these functions will be called inside the merge_and unlock_pages_up right before we attempt to merge
   * if the borrowing succeeds we can directly release locks on all the three pages, pop the parent from the locked pages stack and break out of this loop
 * OPTIMIZATION in suffix truncation :: handle cases if INT, UINT, LARGE_UINT, BIT_FIELD, in loop 1, if unequal on ASC-> then set element to last_tuple_page1 element + 1 (to min element if NULL), if unequal on DESC-> then set element to last_tuple_page1 element - 1, if the last_tuple_page1_element is not the min value, else set it to NULL
